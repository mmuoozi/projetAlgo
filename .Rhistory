time1
time2
time3
time4
length <- c(10, 10**2, 10**3, 10**4, 10**5)
plot(time1, length, type = 'b', xlab = "time in seconds", ylab = "data length")
plot(time2, length, type = 'b', xlab = "time in seconds", ylab = "data length")
plot(time3, length, type = 'b', xlab = "time in seconds", ylab = "data length")
plot(time4, length, type = 'b', xlab = "time in seconds", ylab = "data length")
one.simu <- function(n, type = "decimal", func = "radixSort", precision = 5)
{
# Tire n nombres décimaux aléatoires compris entre 0 et n
if(type == "decimal"){v <- round(runif(n, min=0, max = n), precision)}
if(func == "heap_sort"){t <- system.time(heap_sort(v))[[1]]}
if(func == "radix_sort_decimal"){t <- system.time(radix_sort_decimal(v))[[1]]}
if(func == "heap_sort_Rcpp"){t <- system.time(heap_sort_Rcpp(v))[[1]]}
if(func == "radix_sort_decimal_Rcpp"){t <- system.time(radix_sort_decimal_Rcpp(v))[[1]]}
return(t)
}
# We evaluate the time with a given n over 2 algorithms. We choose
n <- 10000
one.simu(n, type= "decimal", func = "radix_sort_decimal")
one.simu(n, type= "integer",  func = "heap_sort")
one.simu(n, type= "decimal", func="radix_sort_decimal_Rcpp")
one.simu(n, type= "integer",  func = "heap_sort_Rcpp")
one.simu <- function(n, type = "decimal", func = "radixSort", precision = 5)
{
# Tire n nombres décimaux aléatoires compris entre 0 et n
if(type == "decimal"){v <- round(runif(n, min=0, max = n), precision)}
if(func == "heap_sort"){t <- system.time(heap_sort(v))[[1]]}
if(func == "radix_sort_decimal"){t <- system.time(radix_sort_decimal(v))[[1]]}
if(func == "heap_sort_Rcpp"){t <- system.time(heap_sort_Rcpp(v))[[1]]}
if(func == "radix_sort_decimal_Rcpp"){t <- system.time(radix_sort_decimal_Rcpp(v))[[1]]}
return(t)
}
# We evaluate the time with a given n over 2 algorithms. We choose
n <- 10000
one.simu(n, type= "decimal", func = "radix_sort_decimal")
one.simu(n, type= "integer",  func = "heap_sort")
one.simu(n, type= "decimal", func="radix_sort_decimal_Rcpp")
one.simu(n, type= "integer",  func = "heap_sort_Rcpp")
one.simu <- function(n, type = "decimal", func = "radixSort", precision = 5)
{
# Tire n nombres décimaux aléatoires compris entre 0 et n
if(type == "decimal"){v <- round(runif(n, min=0, max = n), precision)}
if(func == "heap_sort"){t <- system.time(heap_sort(v))[[1]]}
if(func == "radix_sort_decimal"){t <- system.time(radix_sort_decimal(v))[[1]]}
if(func == "heap_sort_Rcpp"){t <- system.time(heap_sort_Rcpp(v))[[1]]}
if(func == "radix_sort_decimal_Rcpp"){t <- system.time(radix_sort_decimal_Rcpp(v))[[1]]}
return(t)
}
# We evaluate the time with a given n over 2 algorithms. We choose
n <- 10000
one.simu(n, type= "decimal", func = "radix_sort_decimal")
one.simu(n, type= "integer",  func = "heap_sort")
one.simu(n, type= "decimal", func="radix_sort_decimal_Rcpp")
one.simu(n, type= "integer",  func = "heap_sort_Rcpp")
one.simu <- function(n, type = "decimal", func = "radixSort", precision = 5)
{
# Tire n nombres décimaux aléatoires compris entre 0 et n
if(type == "decimal"){v <- round(runif(n, min=0, max = n), precision)}
if(func == "heap_sort"){t <- system.time(heap_sort(v))[[1]]}
if(func == "radix_sort_decimal"){t <- system.time(radix_sort_decimal(v))[[1]]}
if(func == "heap_sort_Rcpp"){t <- system.time(heap_sort_Rcpp(v))[[1]]}
if(func == "radix_sort_decimal_Rcpp"){t <- system.time(radix_sort_decimal_Rcpp(v))[[1]]}
return(t)
}
# We evaluate the time with a given n over 2 algorithms. We choose
n <- 10000
one.simu(n, type= "decimal", func = "radix_sort_decimal")
one.simu(n, type= "integer",  func = "heap_sort")
one.simu(n, type= "decimal", func="radix_sort_decimal_Rcpp")
one.simu(n, type= "integer",  func = "heap_sort_Rcpp")
one.simu <- function(n, type = "decimal", func = "radixSort", precision = 5)
{
# Tire n nombres décimaux aléatoires compris entre 0 et n
if(type == "decimal"){v <- round(runif(n, min=0, max = n), precision)}
if(func == "heap_sort"){t <- system.time(heap_sort(v))[[1]]}
if(func == "radix_sort_decimal"){t <- system.time(radix_sort_decimal(v))[[1]]}
if(func == "heap_sort_Rcpp"){t <- system.time(heap_sort_Rcpp(v))[[1]]}
if(func == "radix_sort_decimal_Rcpp"){t <- system.time(radix_sort_decimal_Rcpp(v))[[1]]}
return(t)
}
# We evaluate the time with a given n over 2 algorithms. We choose
n <- 10000
one.simu(n, type= "decimal", func = "radix_sort_decimal")
one.simu(n, type= "integer",  func = "heap_sort")
one.simu(n, type= "decimal", func="radix_sort_decimal_Rcpp")
one.simu(n, type= "integer",  func = "heap_sort_Rcpp")
# Valeur de n (taille du vecteur à trier)
n <- 10000
# Nombre de fois où on répète l'algorithme sur un vecteur de taille n
nbSimus <- 10
# Temps d'exécutions
time1 <- 0; time2 <- 0
time3 <- 0; time4 <- 0
for(i in 1:nbSimus){time1 <- time1 + one.simu(n, func = "radix_sort_decimal")}
for(i in 1:nbSimus){time2 <- time2 + one.simu(n, func = "heap_sort")}
for(i in 1:nbSimus){time3 <- time3 + one.simu(n, func = "radix_sort_decimal_Rcpp")}
for(i in 1:nbSimus){time4 <- time4 + one.simu(n, func = "heap_sort_Rcpp")}
#  Temps d'exécutions des differents algo
time1
time2
time3
time4
# Valeur de n (taille du vecteur à trier)
n <- 10000
# Nombre de fois où on répète l'algorithme sur un vecteur de taille n
nbSimus <- 10
# Temps d'exécutions
time1 <- 0; time2 <- 0
time3 <- 0; time4 <- 0
for(i in 1:nbSimus){time1 <- time1 + one.simu(n, func = "radix_sort_decimal")}
for(i in 1:nbSimus){time2 <- time2 + one.simu(n, func = "heap_sort")}
for(i in 1:nbSimus){time3 <- time3 + one.simu(n, func = "radix_sort_decimal_Rcpp")}
for(i in 1:nbSimus){time4 <- time4 + one.simu(n, func = "heap_sort_Rcpp")}
#  Temps d'exécutions des differents algo
time1
time2
time3
time4
# Valeur de n (taille du vecteur à trier)
n <- 10000
# Nombre de fois où on répète l'algorithme sur un vecteur de taille n
nbSimus <- 10
# Temps d'exécutions
time1 <- 0; time2 <- 0
time3 <- 0; time4 <- 0
for(i in 1:nbSimus){time1 <- time1 + one.simu(n, func = "radix_sort_decimal")}
for(i in 1:nbSimus){time2 <- time2 + one.simu(n, func = "heap_sort")}
for(i in 1:nbSimus){time3 <- time3 + one.simu(n, func = "radix_sort_decimal_Rcpp")}
for(i in 1:nbSimus){time4 <- time4 + one.simu(n, func = "heap_sort_Rcpp")}
#  Temps d'exécutions des differents algo
time1
time2
time3
time4
# Valeur de n (taille du vecteur à trier)
n <- 10000
# Nombre de fois où on répète l'algorithme sur un vecteur de taille n
nbSimus <- 10
# Temps d'exécutions
time1 <- 0; time2 <- 0
time3 <- 0; time4 <- 0
for(i in 1:nbSimus){time1 <- time1 + one.simu(n, func = "radix_sort_decimal")}
for(i in 1:nbSimus){time2 <- time2 + one.simu(n, func = "heap_sort")}
for(i in 1:nbSimus){time3 <- time3 + one.simu(n, func = "radix_sort_decimal_Rcpp")}
for(i in 1:nbSimus){time4 <- time4 + one.simu(n, func = "heap_sort_Rcpp")}
#  Temps d'exécutions des differents algo
time1
time2
time3
time4
#gain R -> Rcpp
time1/time3 #RadixSort
time2/time4 #HeapSort
#gain  Heap -> Radix
time2/time1
time4/time3
library(microbenchmark)
library(ggplot2)
n <- 1000
res <- microbenchmark(one.simu(n, func = "radix_sort_Rcpp"), one.simu(n, func = "heap_sort_Rcpp"), times = 50)
autoplot(res)
print(res)
n <- 10000
res <- microbenchmark(one.simu(n, func = "radix_sort_Rcpp"), one.simu(n, func = "heap_sort_Rcpp"), times = 50)
autoplot(res)
print(res)
n <- 100000
res <- microbenchmark( one.simu(n = n, type = "decimal", func = "radix_sort_decimal_Rcpp"), one.simu(n = n, type = "decimal", func = "heap_sort_Rcpp"), times = 50)
autoplot(res)
print(res)
#radix sort Rcpp
nbSimus <- 20
vector_n <- seq(from = 5000, to = 50000, length.out = nbSimus)
nbRep <- 50
res_Radix <- data.frame(matrix(0, nbSimus, nbRep + 1))
colnames(res_Radix) <- c("n", paste0("Rep",1:nbRep))
j <- 1
for(i in vector_n)
{
res_Radix[j,] <- c(i, replicate(nbRep, one.simu(i, func = "radix_sort_Rcpp")))
j <- j + 1
}
#radix sort Rcpp
nbSimus <- 20
vector_n <- seq(from = 5000, to = 50000, length.out = nbSimus)
nbRep <- 50
res_Radix <- data.frame(matrix(0, nbSimus, nbRep + 1))
colnames(res_Radix) <- c("n", paste0("Rep",1:nbRep))
j <- 1
for(i in vector_n)
{
res_Radix[j,] <- c(i, replicate(nbRep, one.simu(i, func = "radix_sort_Rcpp")))
j <- j + 1
}
lm(log(res) ~ log(vector_n))
#heap sort en Rcpp
nbSimus <- 20
vector_n <- seq(from = 10000, to = 100000, length.out = nbSimus)
nbRep <- 50
res_Heap <- data.frame(matrix(0, nbSimus, nbRep + 1))
colnames(res_Heap) <- c("n", paste0("Rep",1:nbRep))
j <- 1
for(i in vector_n)
{
res_Heap[j,] <- c(i, replicate(nbRep, one.simu(i, func = "heap_sort_Rcpp")))
#print(j)
j <- j + 1
}
res <- rowMeans(res_Heap[,-1])
plot(vector_n, res, type = 'b', xlab = "data length", ylab = "mean time in seconds")
length <- c(2, 2**2, 2**3, 2**4, 2**5, 2**6, 2**7, 2**8, 2**9, 2**10, 2**1, 2**12)
plot(time1, length, type = 'b', xlab = "time in seconds", ylab = "data length")
length <- c(2, 2**2, 2**3, 2**4, 2**5, 2**6, 2**7, 2**8, 2**9, 2**10, 2**1, 2**12)
plot(time1, length, type = 'b', xlab = "time in seconds", ylab = "data length")
#radix sort Rcpp
nbSimus <- 20
vector_n <- seq(from = 5000, to = 50000, length.out = nbSimus)
nbRep <- 50
res_Radix <- data.frame(matrix(0, nbSimus, nbRep + 1))
colnames(res_Radix) <- c("n", paste0("Rep",1:nbRep))
j <- 1
for(i in vector_n)
{
res_Radix[j,] <- c(i, replicate(nbRep, one.simu(i, func = "radix_sort_Rcpp")))
j <- j + 1
}
library(TriRadix)
devtools::install_github("vrunge/M2algorithmique")
library(M2algorithmique)
library(TriRadix)
radix_sort_Rcpp <- function(x) {
library(Rcpp)
sourceCpp("triradixcpp.cpp")
return(radixsort(x))
}
radix_sort_decimal_Rcpp <- function(x) {
library(Rcpp)
sourceCpp("triradixcpp.cpp")
return(radix_sort_rcpp(x))
}
n <- 10
v <- sample(0:10, n, replace = TRUE)
v
radixSort(v)
radix_sort_Rcpp(v)
heap_sort(v)
heap_sort_Rcpp(v)
one.simu <- function(n, type = "sample", func = "radixSort")
{
if(type == "sample"){v <- sample(n)}else{v <- n:1}
if(func == "radixSort"){t <- system.time(radixSort(v))[[1]]}
if(func == "heap_sort"){t <- system.time(heap_sort(v))[[1]]}
if(func == "radix_sort_Rcpp"){t <- system.time(radix_sort_Rcpp(v))[[1]]}
if(func == "heap_sort_Rcpp"){t <- system.time(heap_sort_Rcpp(v))[[1]]}
return(t)
}
n <- 10**(4)
v <- sample(0:10, n, replace = TRUE)
one.simu(v, func = "radixSort")
one.simu(v, func = "heap_sort")
one.simu(v, func = "radix_sort_Rcpp")
one.simu(v, func = "heap_sort_Rcpp")
# We compare the running time with repeated executions (nbSimus times)
n <- 10**(4)
nbSimus <- 10
time1 <- 0; time2 <- 0
time3 <- 0; time4 <- 0
for(i in 1:nbSimus){time1 <- time1 + one.simu(n, func = "radixSort")}
for(i in 1:nbSimus){time2 <- time2 + one.simu(n, func = "heap_sort")}
for(i in 1:nbSimus){time3 <- time3 + one.simu(n, func = "radix_sort_Rcpp")}
for(i in 1:nbSimus){time4 <- time4 + one.simu(n, func = "heap_sort_Rcpp")}
#temps d'éxvcution de chaque algorithme
time1
time2
time3
time4
#gain R -> Rcpp
time1/time3 #Radix Sort
time2/time4 #Heap Sort
#gain radix -> heap
time1/time2 #R
time3/time4 #Rcpp
#max gain between radix R and heap sort Rcpp
time1/time4
n <- 1
nbSimus <- 5
time1 <- c(); time2 <- c()
time3 <- c(); time4 <- c()
for(j in 1:12){
n <- n * 2
t1 <- 0; t2 <- 0
t3 <- 0; t4 <- 0
for(i in 1:nbSimus){t1 <- t1 + one.simu(n, func = "radixSort")}
time1 <- append(time1, t1)
for(i in 1:nbSimus){t2 <- t2 + one.simu(n, func = "heap_sort")}
time2 <- append(time2, t2)
for(i in 1:nbSimus){t3 <- t3 + one.simu(n, func = "radix_sort_Rcpp")}
time3 <- append(time3, t3)
for(i in 1:nbSimus){t4 <- t4 + one.simu(n, func = "heap_sort_Rcpp")}
time4 <- append(time4, t4)
}
#temps d'execution de chaque algo
time1
time2
time3
time4
length <- c(2, 2**2, 2**3, 2**4, 2**5, 2**6, 2**7, 2**8, 2**9, 2**10, 2**1, 2**12)
plot(time1, length, type = 'b', xlab = "time in seconds", ylab = "data length")
plot(time2, length, type = 'b', xlab = "time in seconds", ylab = "data length")
plot(time3, length, type = 'b', xlab = "time in seconds", ylab = "data length")
plot(time4, length, type = 'b', xlab = "time in seconds", ylab = "data length")
time1[12]/time3[12]
time2[12]/time4[12]
one.simu <- function(n, func = "radixSort")
{
v <- sample(10000:99999, n, replace = TRUE)
if(func == "radixSort"){t <- system.time(radixSort(v))[[1]]}
if(func == "heap_sort"){t <- system.time(heap_sort(v))[[1]]}
if(func == "radix_sort_Rcpp"){t <- system.time(radix_sort_Rcpp(v))[[1]]}
if(func == "heap_sort_Rcpp"){t <- system.time(heap_sort_Rcpp(v))[[1]]}
return(t)
}
# We compare the running time with repeated executions (nbSimus times)
n <- 10**(5)
nbSimus <- 10
time1 <- 0; time2 <- 0
time3 <- 0; time4 <- 0
for(i in 1:nbSimus){time1 <- time1 + one.simu(n, func = "radixSort")}
for(i in 1:nbSimus){time2 <- time2 + one.simu(n, func = "heap_sort")}
for(i in 1:nbSimus){time3 <- time3 + one.simu(n, func = "radix_sort_Rcpp")}
for(i in 1:nbSimus){time4 <- time4 + one.simu(n, func = "heap_sort_Rcpp")}
time1
time2
time3
time4
#gain Heap -> Radix
time2/time1 #R
time4/time3 #Rcpp
#gain R -> Rcpp
time1/time3
time2/time4
n <- 1
nbSimus <- 5
time1 <- c(); time2 <- c()
time3 <- c(); time4 <- c()
for(j in 1:5){
n <- n * 10
t1 <- 0; t2 <- 0
t3 <- 0; t4 <- 0
for(i in 1:nbSimus){t1 <- t1 + one.simu(n, func = "radixSort")}
time1 <- append(time1, t1)
for(i in 1:nbSimus){t2 <- t2 + one.simu(n, func = "heap_sort")}
time2 <- append(time2, t2)
for(i in 1:nbSimus){t3 <- t3 + one.simu(n, func = "radix_sort_Rcpp")}
time3 <- append(time3, t3)
for(i in 1:nbSimus){t4 <- t4 + one.simu(n, func = "heap_sort_Rcpp")}
time4 <- append(time4, t4)
}
time1
time2
time3
time4
length <- c(10, 10**2, 10**3, 10**4, 10**5)
plot(time1, length, type = 'b', xlab = "time in seconds", ylab = "data length")
plot(time2, length, type = 'b', xlab = "time in seconds", ylab = "data length")
plot(time3, length, type = 'b', xlab = "time in seconds", ylab = "data length")
plot(time4, length, type = 'b', xlab = "time in seconds", ylab = "data length")
one.simu <- function(n, type = "decimal", func = "radixSort", precision = 5)
{
# Tire n nombres décimaux aléatoires compris entre 0 et n
if(type == "decimal"){v <- round(runif(n, min=0, max = n), precision)}
if(func == "heap_sort"){t <- system.time(heap_sort(v))[[1]]}
if(func == "radix_sort_decimal"){t <- system.time(radix_sort_decimal(v))[[1]]}
if(func == "heap_sort_Rcpp"){t <- system.time(heap_sort_Rcpp(v))[[1]]}
if(func == "radix_sort_decimal_Rcpp"){t <- system.time(radix_sort_decimal_Rcpp(v))[[1]]}
return(t)
}
# We evaluate the time with a given n over 2 algorithms. We choose
n <- 10000
one.simu(n, type= "decimal", func = "radix_sort_decimal")
one.simu(n, type= "integer",  func = "heap_sort")
one.simu(n, type= "decimal", func="radix_sort_decimal_Rcpp")
one.simu(n, type= "integer",  func = "heap_sort_Rcpp")
# Valeur de n (taille du vecteur à trier)
n <- 10000
# Nombre de fois où on répète l'algorithme sur un vecteur de taille n
nbSimus <- 10
# Temps d'exécutions
time1 <- 0; time2 <- 0
time3 <- 0; time4 <- 0
for(i in 1:nbSimus){time1 <- time1 + one.simu(n, func = "radix_sort_decimal")}
for(i in 1:nbSimus){time2 <- time2 + one.simu(n, func = "heap_sort")}
for(i in 1:nbSimus){time3 <- time3 + one.simu(n, func = "radix_sort_decimal_Rcpp")}
for(i in 1:nbSimus){time4 <- time4 + one.simu(n, func = "heap_sort_Rcpp")}
#  Temps d'exécutions des differents algo
time1
time2
time3
time4
# Valeur de n (taille du vecteur à trier)
n <- 10000
# Nombre de fois où on répète l'algorithme sur un vecteur de taille n
nbSimus <- 10
# Temps d'exécutions
time1 <- 0; time2 <- 0
time3 <- 0; time4 <- 0
for(i in 1:nbSimus){time1 <- time1 + one.simu(n, func = "radix_sort_decimal")}
for(i in 1:nbSimus){time2 <- time2 + one.simu(n, func = "heap_sort")}
for(i in 1:nbSimus){time3 <- time3 + one.simu(n, func = "radix_sort_decimal_Rcpp")}
for(i in 1:nbSimus){time4 <- time4 + one.simu(n, func = "heap_sort_Rcpp")}
#  Temps d'exécutions des differents algo
time1
time2
time3
time4
#gain  Heap -> Radix
time2/time1
time4/time3
library(microbenchmark)
library(ggplot2)
n <- 1000
res <- microbenchmark(one.simu(n, func = "radix_sort_Rcpp"), one.simu(n, func = "heap_sort_Rcpp"), times = 50)
autoplot(res)
n <- 10000
res <- microbenchmark(one.simu(n, func = "radix_sort_Rcpp"), one.simu(n, func = "heap_sort_Rcpp"), times = 50)
autoplot(res)
n <- 100000
res <- microbenchmark( one.simu(n = n, type = "decimal", func = "radix_sort_decimal_Rcpp"), one.simu(n = n, type = "decimal", func = "heap_sort_Rcpp"), times = 50)
autoplot(res)
#radix sort Rcpp
nbSimus <- 20
vector_n <- seq(from = 5000, to = 50000, length.out = nbSimus)
nbRep <- 50
res_Radix <- data.frame(matrix(0, nbSimus, nbRep + 1))
colnames(res_Radix) <- c("n", paste0("Rep",1:nbRep))
j <- 1
for(i in vector_n)
{
res_Radix[j,] <- c(i, replicate(nbRep, one.simu(i, func = "radix_sort_Rcpp")))
j <- j + 1
}
#heap sort en Rcpp
nbSimus <- 20
vector_n <- seq(from = 10000, to = 100000, length.out = nbSimus)
nbRep <- 50
res_Heap <- data.frame(matrix(0, nbSimus, nbRep + 1))
colnames(res_Heap) <- c("n", paste0("Rep",1:nbRep))
j <- 1
for(i in vector_n)
{
res_Heap[j,] <- c(i, replicate(nbRep, one.simu(i, func = "heap_sort_Rcpp")))
#print(j)
j <- j + 1
}
res <- rowMeans(res_Heap[,-1])
plot(vector_n, res, type = 'b', xlab = "data length", ylab = "mean time in seconds")
lm(log(res) ~ log(vector_n))
#radix sort en Rcpp
nbSimus <- 20
vector_n <- seq(from = 5000, to = 50000, length.out = nbSimus)
nbRep <- 50
res_Radix <- data.frame(matrix(0, nbSimus, nbRep + 1))
colnames(res_Radix) <- c("n", paste0("Rep",1:nbRep))
j <- 1
for(i in vector_n)
24
{
res_Radix[j,] <- c(i, replicate(nbRep, one.simu(i, func = "radix_sort_decimal_Rcpp")))
j <- j + 1
}
res <- rowMeans(res_Radix[,-1])
plot(vector_n, res, type = 'b', xlab = "data length", ylab = "mean time in seconds")
lm(log(res) ~ log(vector_n))
n <- 1
nbSimus <- 5
time1 <- c(); time2 <- c()
time3 <- c(); time4 <- c()
for(j in 1:12){
n <- n * 2
t1 <- 0; t2 <- 0
t3 <- 0; t4 <- 0
for(i in 1:nbSimus){t1 <- t1 + one.simu(n, func = "radixSort")}
time1 <- append(time1, t1)
for(i in 1:nbSimus){t2 <- t2 + one.simu(n, func = "heap_sort")}
time2 <- append(time2, t2)
for(i in 1:nbSimus){t3 <- t3 + one.simu(n, func = "radix_sort_Rcpp")}
time3 <- append(time3, t3)
for(i in 1:nbSimus){t4 <- t4 + one.simu(n, func = "heap_sort_Rcpp")}
time4 <- append(time4, t4)
}
n <- 1
nbSimus <- 5
time1 <- c(); time2 <- c()
time3 <- c(); time4 <- c()
for(j in 1:12){
n <- n * 2
t1 <- 0; t2 <- 0
t3 <- 0; t4 <- 0
for(i in 1:nbSimus){t1 <- t1 + one.simu(n, func = "radixSort")}
time1 <- append(time1, t1)
for(i in 1:nbSimus){t2 <- t2 + one.simu(n, func = "heap_sort")}
time2 <- append(time2, t2)
for(i in 1:nbSimus){t3 <- t3 + one.simu(n, func = "radix_sort_Rcpp")}
time3 <- append(time3, t3)
for(i in 1:nbSimus){t4 <- t4 + one.simu(n, func = "heap_sort_Rcpp")}
time4 <- append(time4, t4)
}
time1[12]/time3[12]
time2[12]/time4[12]
